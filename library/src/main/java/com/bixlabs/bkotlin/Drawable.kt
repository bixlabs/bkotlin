package com.bixlabs.bkotlin

import android.content.Context
import android.content.res.ColorStateList
import android.graphics.Bitmap
import android.graphics.drawable.BitmapDrawable
import android.graphics.drawable.Drawable
import android.os.Build
import android.support.annotation.ColorRes
import android.support.annotation.DrawableRes
import android.support.v4.content.ContextCompat
import android.support.v4.graphics.drawable.DrawableCompat


/**
 * Converts a Bitmap to a Drawable
 * @return The Drawable Object
 */
fun Context.bitmapToDrawable(bitmap: Bitmap?): Drawable? = BitmapDrawable(this.resources, bitmap)

/**
 * Converts this Bitmap to a Drawable
 * @return The Drawable Object
 */
fun Bitmap.toDrawable(context: Context): Drawable? = BitmapDrawable(context.resources, this)

/**
 * Returns a drawable object associated with a particular resource ID and styled for the current theme.
 * @param [resId] [Int] The desired resource identifier, as generated by the aapt tool. This integer encodes the package,
 *                type, and resource entry. The value 0 is an invalid identifier.
 * @return [Drawable] An object that can be used to draw this resource, or null if the resource could not be resolved.
 */
fun Context.getDrawableCompat(@DrawableRes resId: Int): Drawable? {
    val attempt: AttemptResult<Drawable> = attempt {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
            return@attempt this.getDrawable(resId)
        } else {
            return@attempt this.resources.getDrawable(resId)
        }
    }

    return when {
        attempt.hasValue -> attempt.value
        else -> {
            attempt.error?.printStackTrace()
            null
        }
    }
}

/**
 * Specifies a tint for drawable as a color state list.
 */
fun Context.getDrawableSelectorCompat(@ColorRes normalColor: Int, @ColorRes pressedColor: Int,
                                      @ColorRes disabledColor: Int, @DrawableRes res: Int): Drawable {

    val drawable = DrawableCompat.wrap(ContextCompat.getDrawable(this, res)).mutate()

    DrawableCompat.setTintList(drawable,
            ColorStateList(
                    arrayOf(intArrayOf(android.R.attr.state_enabled, -android.R.attr.state_pressed),
                            intArrayOf(android.R.attr.state_enabled, android.R.attr.state_pressed),
                            intArrayOf(-android.R.attr.state_enabled)),

                    intArrayOf(ContextCompat.getColor(this, normalColor),
                            ContextCompat.getColor(this, pressedColor),
                            ContextCompat.getColor(this, disabledColor))
            ))

    return drawable
}